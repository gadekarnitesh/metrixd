#!/bin/bash

# MetrixD Pre-commit Hook
# This script runs the same checks as the CI pipeline to catch issues early

set -e

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Check if cargo is installed
if ! command -v cargo &> /dev/null; then
    print_error "Cargo is not installed. Please install Rust and Cargo."
    exit 1
fi

# Check if rustfmt is available
if ! cargo fmt --version &> /dev/null; then
    print_warning "rustfmt not found. Installing..."
    rustup component add rustfmt
fi

# Check if clippy is available
if ! cargo clippy --version &> /dev/null; then
    print_warning "clippy not found. Installing..."
    rustup component add clippy
fi

print_status "Starting pre-commit checks..."

# 1. Check code formatting
print_status "Checking code formatting with rustfmt..."
if cargo fmt --all -- --check; then
    print_success "Code formatting is correct"
else
    print_error "Code formatting issues found!"
    print_warning "Run 'cargo fmt --all' to fix formatting issues"
    exit 1
fi

# 2. Run clippy lints
print_status "Running clippy lints..."
if cargo clippy --all-targets --all-features -- -D warnings; then
    print_success "Clippy checks passed"
else
    print_error "Clippy found issues!"
    print_warning "Fix the clippy warnings before committing"
    exit 1
fi

# 3. Run tests
print_status "Running tests..."
if cargo test --verbose; then
    print_success "All tests passed"
else
    print_error "Tests failed!"
    print_warning "Fix failing tests before committing"
    exit 1
fi

# 4. Check if Cargo.lock is up to date
print_status "Checking if Cargo.lock is up to date..."
if cargo check --locked &> /dev/null; then
    print_success "Cargo.lock is up to date"
else
    print_warning "Cargo.lock may be out of date"
    print_warning "Consider running 'cargo update' if needed"
fi

# 5. Check for common issues
print_status "Checking for common issues..."

# Check for TODO/FIXME comments in staged files
staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(rs|toml|md)$' || true)
if [ -n "$staged_files" ]; then
    todo_count=$(echo "$staged_files" | xargs grep -n -i "TODO\|FIXME" || true | wc -l)
    if [ "$todo_count" -gt 0 ]; then
        print_warning "Found $todo_count TODO/FIXME comments in staged files"
        echo "$staged_files" | xargs grep -n -i "TODO\|FIXME" || true
    fi
fi

# Check for debug prints
debug_prints=$(echo "$staged_files" | xargs grep -n "println!\|dbg!\|eprintln!" || true | wc -l)
if [ "$debug_prints" -gt 0 ]; then
    print_warning "Found $debug_prints debug print statements in staged files"
    echo "$staged_files" | xargs grep -n "println!\|dbg!\|eprintln!" || true
    print_warning "Consider removing debug prints before committing"
fi

print_success "All pre-commit checks passed! ✨"
print_status "Ready to commit."

exit 0
